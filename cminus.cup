/*
  Created by: Ahsen Husain, Giacomo Nunno
  File Name: cminus.cup
  To Build: java java_cup.Main < cminus.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal IF, ELSE, RETURN, INT, VOID, WHILE; 
terminal String NUM;
terminal PLUS, MINUS, TIMES, OVER, LT, GT,LTEQ, GTEQ, EQ, EQEQ, NOTEQ, SEMI, COMMA,LPAREN, RPAREN;
terminal String ID;
terminal LBOXPAREN, RBOXPAREN, LWAVEPAREN, RWAVEPAREN; 
terminal ERROR;
   
non terminal ExpList statement_list, arg_list;
non terminal VarDecList local_declarations;
non terminal VarDecList param_list, params;
non terminal DecList declaration_list, program;
non terminal Dec declaration;
non terminal VarDec var_declaration, param;
non terminal FunctionDec fun_declaration; 
non terminal ReturnExp return_stmt;
non terminal CompoundExp compound_stmt;
non terminal NameTy type_specifier;
non terminal Exp statement , expression_stmt;

non terminal Exp selection_stmt, expression;

non terminal Exp factor, call;
non terminal WhileExp iteration_stmt;
non terminal Var var;
non terminal Exp simple_expression;
non terminal Exp additive_expression;
non terminal Exp term;

non terminal ExpList args;
non terminal Integer mulop;
non terminal Integer addop;
non terminal Integer relop;
non terminal program1;

precedence nonassoc EQEQ, LT, GT, LTEQ, GTEQ, NOTEQ;
precedence left PLUS, MINUS;
precedence left TIMES, OVER;
precedence right EQ;


/* ----------------------------Grammar Section-------------------- */
   
start with program;

program     ::= declaration_list:d
				{: RESULT = d; :}
				;

declaration_list	::= declaration_list:d1 declaration:d2 
				{: DecList t = d1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new DecList(d2, null);
                    RESULT = d1;
                 :}
               | declaration:d
               {:
				RESULT = new DecList(d, null); 
				:}
			   | error:e
			   {:
				System.err.println("Error in declarations(DecList)");
				RESULT = new DecList(new ErrorDec(eleft, eright), null);
			   :}
               ;

declaration		::= var_declaration:v
				{: RESULT = v; :}
                | fun_declaration:f
                {: RESULT = f; :}
                ;
                

var_declaration		::= type_specifier:t ID:i SEMI
				{: RESULT = new SimpleDec(tleft,tright,t,i); :} 
				| type_specifier:t ID:i LBOXPAREN NUM:n RBOXPAREN SEMI
				{: RESULT = new ArrayDec(tleft,tright,t,i, new IntExp( tleft, tright, Integer.parseInt(n) )); :} 
				;

type_specifier		::= INT:i
					{: RESULT = new NameTy(ileft,iright,1); :} 
					| VOID:v
					{: RESULT = new NameTy(vleft,vright,0); :} 
					;

fun_declaration		::= type_specifier:t ID:i LPAREN params:p RPAREN compound_stmt:c
					{: RESULT = new FunctionDec(tleft,tright,t,i,p,c); :} 
					;

params		::= param_list:p
				{: 
					RESULT = p; 
				:}
				| VOID:v
				{: 
					RESULT = new VarDecList(null, null); 
				:}
				;

param_list		::= param_list:l COMMA param:v 
				{: VarDecList t = l;
						while( t.tail != null )
						  t = t.tail;
							t.tail = new VarDecList(v, null);
						RESULT = l;
				:}
				| param:p
				{: 
					RESULT = new VarDecList(p, null); 
				:}
				| error:e
			   {:
				System.err.println("Error in paramaters(param_List)");
				RESULT = new VarDecList(new ErrorVarDec(eleft, eright), null);
			   :}
				;

param		::= type_specifier:t ID:i 
			{: 
				if (t.typ == 0)
				{
					RESULT = new SimpleDec(tleft,tright,t,"void"); 
				}
				RESULT = new SimpleDec(tleft,tright,t,i); 
			:}
			| type_specifier:t ID:i LBOXPAREN RBOXPAREN
			{: RESULT = new ArrayDec(tleft,tright,t,i, new IntExp( tleft, tright, 0 )); :}
			;

compound_stmt		::= LWAVEPAREN local_declarations:l statement_list:s RWAVEPAREN
						{: RESULT = new CompoundExp(lleft,lright,l,s); :}
						;

local_declarations		::= local_declarations:d1 var_declaration:d2 
						{: 
							if( d1 != null)
							{
								VarDecList t = d1;
								while( t.tail != null )
								  t = t.tail;
								t.tail = new VarDecList(d2, null);
								RESULT = d1;
							}
							else if (d1 == null)
							{
								RESULT = new VarDecList(d2, null);
							}
							
						:}
						|
						{:
							RESULT = null;
						:}
						| error:e
					   {:
						System.err.println("Error in declarations(DecList)");
						RESULT = new VarDecList(new ErrorVarDec(eleft, eright), null);
					   :}
						;

statement_list		::= statement_list:l statement:v 
					{: 
						if( l != null)
						{
							ExpList t = l;
							while( t.tail != null )
							  t = t.tail;
							t.tail = new ExpList(v, null);
							RESULT = l;
						}
						else if(l == null)
						{
							RESULT = new ExpList(v, null);
						}
					 :}	
					|
					{:
						RESULT = null;
					:}
					| error:e
					   {:
						System.err.println("Error in statement list(expList)");
						RESULT = new ExpList(new ErrorExp(eleft, eright), null);
					   :}
					;

statement		::= expression_stmt:e 
				{: RESULT = e; :}
				| compound_stmt:c
				{: RESULT = c; :}
				| selection_stmt:s 
				{: RESULT = s; :}
				| iteration_stmt:i
				{: RESULT = i; :}
				| return_stmt:r
				{: RESULT = r; :}
				;
					
expression_stmt		::= expression:e SEMI
					{: RESULT = e; :}
					| SEMI;

selection_stmt		::= IF:i LPAREN expression:e RPAREN statement:s
					{: RESULT = new IfExp(ileft,iright,e,s,new NilExp(ileft, iright)); :}
					| IF:i LPAREN expression:e RPAREN statement:s ELSE statement:el
					{: RESULT = new IfExp(ileft,iright,e,s,el); :}
					;
									
iteration_stmt		::= WHILE:w LPAREN expression:e RPAREN statement:s
					{: RESULT = new WhileExp(wleft,wright,e,s); :}
					;

return_stmt		::= RETURN:r expression:e SEMI 
				{: RESULT = new ReturnExp(rleft,rright,e); :}
				| RETURN:r SEMI
				{: RESULT = new ReturnExp(rleft,rright,new NilExp(rleft, rright)); :}
				;

expression		::= var:v EQ expression:e
				{: RESULT = new AssignExp(vleft,vright,v,e); :}
				| simple_expression:s
				{:
					RESULT = s;
				:}
				;

var		::= ID:i 
			{: RESULT = new SimpleVar(ileft,iright,i); :}
			| ID:i LBOXPAREN expression:e RBOXPAREN
			{: RESULT = new IndexVar(ileft,iright,i,e); :}
			;

simple_expression		::= additive_expression:a1 relop:r additive_expression:a2
						{: 
							RESULT = new OpExp(a1left,a1right,a1,r,a2); 
						:}
						| additive_expression:a
						{: 
							RESULT = a; 
						:}
						;

relop		::= LTEQ 
				{:
					RESULT = OpExp.LE;
				:}
				| LT 
				{:
					RESULT = OpExp.LT;
				:}
				| GT 
				{:
					RESULT = OpExp.GT;
				:}
				| GTEQ 
				{:
					RESULT = OpExp.GE;
				:}
				| EQEQ 
				{:
					RESULT = OpExp.EQ;
				:}
				| NOTEQ
				{:
					RESULT = OpExp.NE;
				:}
				;

additive_expression		::= additive_expression:a addop:d term:t 
				{:
					RESULT = new OpExp(aleft, aright, a, d, t);
				:}
				| term:t
				{:
					RESULT = t;
				:}
				;

addop		::= PLUS:p
				{:
					RESULT = OpExp.PLUS;
				:}
				| MINUS:m
				{:
					RESULT = OpExp.MINUS;
				:}
				;

term		::= term:t mulop:m factor:f 
				{:
					RESULT = new OpExp(tleft, tright, t, m, f);
				:}
				| factor:f
				{:
					RESULT = f;
				:}
				;

mulop		::= TIMES:t
				{:
					RESULT = OpExp.MUL;
				:}
				| OVER:o
				{:
					RESULT = OpExp.DIV;
				:}
				;

factor		::= LPAREN expression:e RPAREN 
				{:
					RESULT = e;
				:}
				| var:v
				{:
					RESULT = new VarExp(vleft, vright, v);
				:}
				| call:c 
				{:
					RESULT = c;
				:}
				| NUM:n
				{:
					RESULT = new IntExp( nleft, nright, Integer.parseInt(n) );
				:}
				;

call		::= ID:i LPAREN args:a RPAREN
				{:
					RESULT = new CallExp(ileft, iright, i, a);
				:}
				;

args		::= arg_list:a
				{:
					RESULT = a;
				:}
				|
				;

arg_list	::= arg_list:a1 COMMA expression:e 
				{: ExpList t = a1;
                    while( t.tail != null )
                      t = t.tail;
                    t.tail = new ExpList(e, null);
                    RESULT = a1;
                :}
				| expression:e
				{: 
					RESULT = new ExpList(e, null);
                :}
                | error:e
				   {:
					System.err.println("Error in arg declarations list(expList)");
					RESULT = new ExpList(new ErrorExp(eleft, eright), null);
				   :}
				;
