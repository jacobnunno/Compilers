The abstract syntax tree is:
FunctionDec: main - VOID
    CompoundExp: 
FunctionDec: main - VOID
    CompoundExp: 
        SimpleDec: x - INT
        SimpleDec: fac - INT
        SimpleDec: x - INT
        AssignExp:
            SimpleVar: x
            CallExp: input
        AssignExp:
            SimpleVar: fac
            IntExp: 1
        WhileExp: 
            OpExp: > 
                VarExp: 
                    SimpleVar: x
                IntExp: 1
            CompoundExp: 
                AssignExp:
                    SimpleVar: fac
                    OpExp: * 
                        VarExp: 
                            SimpleVar: fac
                        VarExp: 
                            SimpleVar: x
                AssignExp:
                    SimpleVar: x
                    OpExp: - 
                        VarExp: 
                            SimpleVar: x
                        IntExp: 1
        CallExp: output
            VarExp: 
                SimpleVar: fac
ArrayDec: x [10] - INT
FunctionDec: notMain - VOID
    CompoundExp: 
        SimpleDec: x - INT
        SimpleDec: fac - INT
        AssignExp:
            SimpleVar: x
            CallExp: input
        AssignExp:
            SimpleVar: fac
            IntExp: 1
The Symbol Tree is:
Entering the Global level:
Entering the scope for function main
Leaving the scope for function main
Entering the scope for function main
    x: INT
    fac: INT
    x: INT
    Entering a new block: 
    Leaving the block
Leaving the scope for function main
x: INT
Entering the scope for function notMain
    x: INT
    fac: INT
Leaving the scope for function notMain
Leaving the Global level
